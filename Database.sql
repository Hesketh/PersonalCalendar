--> Drop Existing Sequences and Tables
DROP TABLE IF EXISTS "CALENDARUSERS";
DROP TABLE IF EXISTS "EVENTS";
DROP TABLE IF EXISTS "CALENDARS";
DROP TABLE IF EXISTS "PRIVILEGES";
DROP TABLE IF EXISTS "USERS";

--> Create Tables
CREATE TABLE "USERS" (
 USERNAME					VARCHAR(16) NOT NULL,
 PASSWORD					VARCHAR(32) NOT NULL,
 CONSTRAINT "USERNAME_MIN" CHECK (CHAR_LENGTH(USERNAME) >= 2),
 CONSTRAINT "PASSWORD_MIN" CHECK (CHAR_LENGTH(PASSWORD) >= 3),
 CONSTRAINT "USERNAME_LOWERCASE" CHECK (USERNAME = LOWER(USERNAME)),
 CONSTRAINT "USERS_PK" PRIMARY KEY (USERNAME));
 
 CREATE TABLE "PRIVILEGES" (
 PRIVILEGE					VARCHAR(5) NOT NULL,
 CONSTRAINT "PRIVILEGES_PK" PRIMARY KEY (PRIVILEGE));
 
 CREATE TABLE "CALENDARS" (
 CALENDARID					SERIAL,
 CALENDARNAME				VARCHAR(32) NOT NULL,
 CONSTRAINT "CALENDARS_PK" PRIMARY KEY (CALENDARID));
 
 CREATE TABLE "EVENTS" (
 EVENTID					SERIAL,
 CALENDARID					INTEGER NOT NULL,
 EVENTTITLE					VARCHAR(32) NOT NULL,
 EVENTDESCRIPTION			VARCHAR(256),
 EVENTSTART					TIMESTAMP,
 EVENTEND					TIMESTAMP,
 CONSTRAINT "EVENT_START_BEFORE_END" CHECK (EVENTSTART < EVENTEND),
 CONSTRAINT "CALENDARID_FK" FOREIGN KEY (CALENDARID) REFERENCES "CALENDARS" (CALENDARID),
 CONSTRAINT "EVENTS_PK" PRIMARY KEY (EVENTID));
 
 CREATE TABLE "CALENDARUSERS" (
 CALENDARID					INTEGER NOT NULL,
 USERNAME					VARCHAR(16) NOT NULL,
 PRIVILEGE					VARCHAR(5) NOT NULL,
 CONSTRAINT "CALENDARID_FK" FOREIGN KEY (CALENDARID) REFERENCES "CALENDARS" (CALENDARID),
 CONSTRAINT "USERNAME_FK" FOREIGN KEY (USERNAME) REFERENCES "USERS" (USERNAME),
 CONSTRAINT "PRIVILEGE" FOREIGN KEY (PRIVILEGE) REFERENCES "PRIVILEGES" (PRIVILEGE),
 CONSTRAINT "CALENDARUSERS_PK" PRIMARY KEY (USERNAME,CALENDARID));

--> Add Privileges

INSERT INTO "PRIVILEGES"
VALUES('READ');

INSERT INTO "PRIVILEGES"
VALUES('WRITE');

INSERT INTO "PRIVILEGES"
VALUES('OWNER');